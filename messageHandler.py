# -*- coding: utf-8 -*-
import vkapi
import MySQLdb
import os
import json
import common
import importlib
from settings import admins, DB_params as p
from command_system import command_list
from notifications import Tip
import re

bot_active = True;

def load_modules(user_id):
   # –ø—É—Ç—å –æ—Ç —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
   files = os.listdir("commands")
   modules = filter(lambda x: x.endswith('.py'), files)
   for m in modules:
      importlib.import_module("commands." + m[0:-3])

   secret_files = os.listdir("secret_commands")
   secret_modules = filter(lambda x: x.endswith('.py'), secret_files)
   if user_id in admins:
      for m in secret_modules:
         importlib.import_module("secret_commands." + m[0:-3])

def get_answer(user_id, message):
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–µ —É–¥–∞—Å—Ç—Å—è
    if bot_active==False:
        if user_id in admins:
            return '–Ø –ø—Ä–∏–ª–µ–≥ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.', ''
        else:
            return '–ò–∑–≤–∏–Ω–∏, —è —Å–µ–π—á–∞—Å –æ–±–Ω–æ–≤–ª—è—é—Å—å. –ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–æ–ø–æ–∑–∂–µ :)', ''

    if not common.check_letter(user_id):
        common.add_letter(user_id)
        return Tip['hello_new'], ''
    answer = "–•–º, –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è üòê\n–ù–∞–ø–∏—à–∏ –ü–û–ú–û–©–¨, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    attachment = ''
    message = re.sub('[\[!@#$&)(*\]]', '', message)
    message_words = message.split()
    for c in command_list:
        if message_words[0].lower() in c.keys:  #–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–∫–æ–º–∞–Ω–¥–∞)
            answer, attachment = c.process(user_id, message_words)
    return answer, attachment


def welcome_new_user(data, token):
   user_id = data['user_id']
   message = '–ø—Ä–∏–≤–µ—Ç'
   load_modules(user_id)
   answer, attachment = get_answer(user_id, message)
   vkapi.send_message(user_id, token, answer, attachment)

def create_answer(data, token):
   user_id = data['user_id'] #id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –í–ö
   message = data['body'] #—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   load_modules(user_id)
   answer, attachment = get_answer(user_id, message)
#   vkapi.send_message(user_id, token, answer, attachment)
   vkapi.send_message_with_buttons(user_id, token, answer, attachment, str(json.dumps(build_buttons(user_id), ensure_ascii=False)) )

FIRST_LINE = [{
         "action": {"type": "text", "label": "–ò–Ω—Ñ–æ"},
         "color": "primary"},
        {
         "action": {"type": "text", "label": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"},
         "color": "default"}]

SECOND_LINE = [{
         "action": {"type": "text", "label": "–ò—Å—Ç–æ—Ä–∏—è"},
         "color": "default"},
        {
         "action": {"type": "text", "label": "–ü–æ–º–æ—â—å"},
         "color": "primary"}]

def generate_event_buttons(events_id):
   KEYBOARD_EVENTS = []
   for i, event_id in enumerate(events_id):
       KEYBOARD_EVENTS.append([{
         "action": {"type": "text", "label": "–ò–¥—É –Ω–∞ " + event_id.upper()},
         "color": "positive"}])
   return KEYBOARD_EVENTS

def build_buttons(user_id): #—Ç—É—Ç –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∞–π–¥–∏—à–Ω–∏–∫ —é–∑–µ—Ä–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–≥–æ –≤—ã–≤–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏—è
   buttons = [FIRST_LINE, SECOND_LINE]
   db=MySQLdb.connect(host=p['host'], user=p['user'], passwd=p['passwd'], db=p['db'], charset = "utf8", use_unicode = True)
   c=db.cursor()
   try:
      c.execute("""SELECT Day, uID FROM Event WHERE Active=True ORDER BY Day""")
      events = c.fetchall()
      events_id = []
      for event in events:
          isreg = c.execute("""SELECT count(*) FROM User_Event WHERE User_id=%s AND Event=%s""", [user_id, event[1]])
          isreg = True if c.fetchone()[0]==0 else False
          if event[1]!=None and isreg:
             events_id.append(str(event[1]))
      KEYBOARD_EVENTS = generate_event_buttons(events_id)
      for KEYBOARD_EVENT in KEYBOARD_EVENTS:
         buttons.insert(0, KEYBOARD_EVENT)
   except:
      pass
   db.close()
   KEYBOARD_MAIN = { "one_time": False, "buttons": buttons }
   return KEYBOARD_MAIN


