# -*- coding: utf-8 -*-
import command_system
from settings import token
import vkapi
import MySQLdb
import hashlib
import random
import common
import pyqrcode
from notifications import Tip, Error
from settings import DB_params as p

def train(user_id, message_words):
   if not common.check_register(user_id):
      return Tip['info'], ''
   if len(message_words) != 3:
      return Tip['train'], ''
   db=MySQLdb.connect(host=p['host'], user=p['user'], passwd=p['passwd'], db=p['db'], charset = "utf8", use_unicode = True)
   c=db.cursor()
   uid = message_words[2].upper()

   #–∏ –ø–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –∑–∞–æ–¥–Ω–æ —É–∑–Ω–∞–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–µ–≥–æ –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∫–∏–Ω—É—Ç—å –µ–º—É –ø–æ–¥—Å–∫–∞–∑–∫—É
   try:
      c.execute("""SELECT id FROM Students WHERE idVK=%s""", [user_id])
      id = c.fetchone()[0]
      c.execute("""SELECT COUNT(*) FROM Students St WHERE idVK=%s AND St.Group IS NOT NULL AND St.Tutor IS NOT NULL AND St.Department IS NOT NULL""", [user_id])
      tip = True if c.fetchone()[0]==0 else False
   except:
      db.close()
      return Error['train_reg'], ''
   if tip:
      db.close()
      return Error['train_info'], ''

   #–ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –∑–∞–Ω—è—Ç–∏–µ
   try:
      c.execute("""SELECT Active, Day FROM Event WHERE uID=%s""", [uid])
      result = c.fetchone()
      active = result[0]
      day = result[1]
      if active==False:
         db.close()
         return Tip['train_day'], ''
   except:
      db.close()
      return Error['train_day'], ''

   #–¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ —Å–æ–±—ã—Ç–∏—é –∏ –ø—Ä–∏—Å—ã–ª–∞–µ–º –µ–º—É QR-–∫–æ–¥
   #–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤–¥—Ä—É–≥ –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª—Å—è
   try:
      c.execute("""SELECT SecretKey FROM Activity WHERE StudentID=%s AND EventID=%s""", [id, uid])
      h = c.fetchone()
      if h==None:
         try:
            code = random.randint(11, 997)*(int(user_id)%9973) + random.randint(11, 9997)
            hcode = hashlib.md5(str(code).encode('utf8'))
            hash = hcode.hexdigest()
            c.execute("""INSERT INTO Activity (StudentID, EventID, SecretKey) VALUES (%s, %s, %s)""",[id, uid, hash])
            c.execute("""INSERT INTO User_Event (User_id, Event) VALUES (%s, %s)""", [user_id, uid]) #–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
            db.commit()
            db.close()
            #–¥–µ–ª–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
            qr = pyqrcode.create(hash)
            qr.png('QR/'+hash+'.png', scale=10) #–¥–µ–ª–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
         except:
            db.rollback()
            db.close()
            return Error['train_add'], ''
      else:
         hash = h[0]
   except:
      db.close()
      return Error['train_check'], ''

   try:
      attachment = vkapi.send_image(token, user_id, hash)
      answer = '‚úÖ –¢—ã –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ '+str(uid)+', –∫–æ—Ç–æ—Ä–æ–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è '+str(day)+'.\n–ü–æ–∫–∞–∂–∏ —ç—Ç–æ—Ç QR-–∫–æ–¥ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!üì±'
      return answer, attachment
   except:
      return Error['train_send'], ''

train_command = command_system.Command()

train_command.keys = ['–∏–¥—É', 'go', '–ø–æ–≥–Ω–∞–ª–∏', '–æ—Ç—Ä–∞–±–æ—Ç–∫–∞']
train_command.description = '–µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –ø–æ–π—Ç–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ'
train_command.process = train
train_command = 6